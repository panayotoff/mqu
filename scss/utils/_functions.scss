@import "../settings";

@function strip-unit($value) {
  @if type-of($value) == "number" and not unitless($value) {
    @return $value / ($value * 0 + 1);
  }
  @return $value;
}

@function rat($prop, $context) {
  @return (strip-unit($prop)/strip-unit($context));
}

//--------------------------------------------------------------
//  Fluid styles
//--------------------------------------------------------------
@function fluid($min, $max, $start, $end) {
  $multiplier: ($max - $min) / ($end - $start) * 100;
  $adder: ($min * $end - $max * $start) / ($end - $start);
  @return calc(#{$multiplier + 0vw} + #{$adder + 0px});
}

@function em($pixels, $context:$font-browser-context) {
  @return rat($pixels, $context) * 1em;
}

@function rem($pixels, $context:$font-browser-context) {
  @return rat($pixels, $context) * 1rem;
}

@function vw($pixels, $viewport-width:$desktop-width) {
  $vw-context: ($viewport-width*.01) * 1px;
  @return rat($pixels, $vw-context) * 1vw;
}

@function vh($pixels, $viewport-height) {
  $vh-context: ($viewport-height*.01) * 1px;
  @return rat($pixels, $vh-context) * 1vh;
}

@function lh($line-height, $font-size) {
  @return rat($line-height, $font-size);
}

@function infix($name) {
	@return if($name, -#{$name}, '');
}

//--------------------------------------------------------------
//  Assets handling
//--------------------------------------------------------------
@function path($asset) {
  @return $base-path + $asset;
}

@function asset($type, $file) {
  @return url($base-path + $type + '/' + $file);
}

@function image($file) {
  @return asset('images', $file);
}

@function font($file) {
  @return asset('fonts', $file);
}
