@import "../settings";
@import "functions";

@mixin when($parent-selector) {
  #{$parent-selector} & {
    @content;
  }
}

@mixin when-class($class-name) {
  .#{$class-name} & {
    @content;
  }
}

@mixin momentum-scrolling {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
}

@mixin font-smoothing {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -moz-font-feature-settings: 'liga' on;
}

@mixin hover-focus {
  &:hover,
  &:focus {
    @content;
  }
}

@mixin pseudo($display: block, $position: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $position;
}

@mixin responsive-ratio($width, $height, $pseudo: false) {
  $padding: unquote(( $height / $width ) * 100 + '%');
  @if $pseudo {
    &:before {
      @include pseudo($position: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

//	@include variant(pt, s, 10, padding-top, 10px); => .pt-s-10 {padding-top: 10px;}
@mixin variant($name, $infix, $variant, $property, $value) {
	.#{$name}#{infix($infix)}#{infix($variant)} {
		#{$property}: #{$value};
	}
}

@mixin variants($infix:false, $spacings:()) {
	@each $spacing in $spacings {
		@include variant('pt', $infix, $spacing, padding-top, rem($spacing));
		@include variant('pb', $infix, $spacing, padding-bottom, rem($spacing));
		@include variant('pl', $infix, $spacing, padding-left, rem($spacing));
		@include variant('pr', $infix, $spacing, padding-right, rem($spacing));
		@include variant('mt', $infix, $spacing, margin-top, rem($spacing));
		@include variant('mb', $infix, $spacing, margin-bottom, rem($spacing));
	}
}

@mixin media($query) {
  @media #{$query} {
    @content;
  }
}

@mixin above($width, $inclusive:false) {
  @media (min-width: if($inclusive, $width*1px, $width + 1px)) {
    @content;
  }
}

@mixin below($width, $inclusive:true) {
  @media (max-width: if($inclusive, $width*1px, $width - 1px)) {
    @content;
  }
}

@mixin between($min, $max, $min-inclusive:true, $max-inclusive:false) {
  $min: if($min-inclusive, $min, $min + 1px);
  $max: if($max-inclusive, $max, $max - 1px);
  @media (min-width: $min) and (max-width: $max) {
    @content;
  }
}

@mixin fluid-property($property, $min, $max, $start: $mobile-width, $end: $desktop-width, $clip: true, $clipAtStart: true, $clipAtEnd: true) {
  $formula: fluid($min, $max, $start, $end);
  #{$property}: $formula;

  @if $clip and $clipAtStart {
    @include below($start) {
      #{$property}: $min + 0px;
    }
  }

  @if $clip and $clipAtEnd {
    @include above($end) {
      #{$property}: $max + 0px;
    }
  }
}